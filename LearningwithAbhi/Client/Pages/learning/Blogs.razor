@page "/Blog"
@using LearningwithAbhi.Shared.Services
@using System.Text.Json
@inject IJSRuntime JSRuntime
@inject HttpClient Http

<PageTitle>Blog Hub - Create and Explore Content</PageTitle>

<main class="container py-5">
    <div class="text-center mb-5">
        <h1 class="display-4 fw-bold text-primary">Blog Hub</h1>
        <p class="lead text-muted">Create your own blogs and explore insightful content</p>        
        <div class="row justify-content-center mt-4">
            <div class="col-md-8">
                <div class="input-group mb-1 ">
                    <input type="text" class="form-control m-3 mt-1" placeholder="Search blogs..." 
                        @bind="searchQuery" @onkeypress="HandleSearchKeyPress" />
                    <button class="btn btn-primary" type="button" @onclick="FilterBlogs">
                        <i class="bi bi-search"></i> Search
                    </button>
                </div>
            </div>
        </div>
        
        <div class="d-flex flex-wrap justify-content-center gap-2 mb-4">
            <button class="btn btn-outline-primary @(activeFilter == "all" ? "active" : "")" 
                    @onclick='() => SetFilter("all")'>All</button>
            <button class="btn btn-outline-primary @(activeFilter == "tech" ? "active" : "")" 
                    @onclick='() => SetFilter("tech")'>Technology</button>
            <button class="btn btn-outline-primary @(activeFilter == "gov" ? "active" : "")" 
                    @onclick='() => SetFilter("gov")'>Government</button>
            <button class="btn btn-outline-primary @(activeFilter == "edu" ? "active" : "")" 
                    @onclick='() => SetFilter("edu")'>Education</button>
        </div>
    </div>

    <div class="row g-4">
        @foreach (var blog in filteredBlogs)
        {
            <div class="col-md-6 col-lg-4">
                <div class="card h-100 shadow-sm">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-start mb-2">
                            <span class="badge bg-primary">@blog.Category</span>
                            <button class="btn btn-sm btn-outline-secondary" @onclick="() => ToggleBookmark(blog.Id)">
                                <i class="bi @(blog.IsBookmarked ? "bi-bookmark-fill" : "bi-bookmark")"></i>
                            </button>
                        </div>
                        
                        <h3 class="card-title h5 mb-3">@blog.Title</h3>
                        <p class="card-text text-muted">@blog.Summary</p>
                        
                        <button class="btn btn-link p-0 text-decoration-none" 
                                @onclick="() => ToggleExpand(blog.Id)">
                            @(expandedBlogs.Contains(blog.Id) ? "Show less" : "Read more")
                            <i class="bi @(expandedBlogs.Contains(blog.Id) ? "bi-chevron-up" : "bi-chevron-down")"></i>
                        </button>
                        
                        <div class="mt-3 @(expandedBlogs.Contains(blog.Id) ? "" : "collapse")">
                            @if (blog.IsList)
                            {
                                <ul class="list-group list-group-flush mb-3">
                                    @foreach (var item in blog.ListItems)
                                    {
                                        <li class="list-group-item">@item</li>
  
                                    }
                                </ul>
                            }
                            else
                            {
                                <div class="list-group list-group-flush mb-3">
                                    @foreach (var resource in blog.Resources)
                                    {
                                        <a href="@resource.Url" target="_blank" 
                                           class="list-group-item list-group-item-action">
                                            <div class="d-flex w-100 justify-content-between">
                                                <h6 class="mb-1">@resource.Title</h6>
                                                <small><i class="bi bi-box-arrow-up-right"></i></small>
                                            </div>
                                            <p class="mb-1 small text-muted">@resource.Description</p>
                                        </a>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                    
                    <div class="card-footer bg-transparent border-top">
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="d-flex align-items-center">
                                <div class="bg-primary text-white rounded-circle d-flex align-items-center justify-content-center" 
                                     style="width: 32px; height: 32px; font-size: 0.8rem;">
                                    @blog.AuthorInitials
                                </div>
                                <div class="ms-2">
                                    <small class="text-muted">By @blog.Author</small>
                                    <br>
                                    <small class="text-muted">@blog.Date.ToString("MMM dd, yyyy")</small>
                                </div>
                            </div>
                            <div>
                                <button class="btn btn-sm btn-outline-danger" @onclick="() => ToggleLike(blog.Id)">
                                    <i class="bi @(blog.IsLiked ? "bi-heart-fill text-danger" : "bi-heart")"></i>
                                    <span>@blog.Likes</span>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</main>

@code {
    private List<Blog> blogs = new();
    private List<Blog> filteredBlogs = new();
    private HashSet<string> expandedBlogs = new();
    private string searchQuery = "";
    private string activeFilter = "all";

    protected override async Task OnInitializedAsync()
    {
        

        InitializeBlogs();
        filteredBlogs = blogs;
        
    }	

    private async Task InitializeBlogs()
    {       
        // set the file in project file to CopyToOutputDirectory
        blogs = await Http.GetFromJsonAsync<List<Blog>>("data/blogposts.json");
      
    }

    private void ToggleExpand(string blogId)
    {
        if (expandedBlogs.Contains(blogId))
        {
            expandedBlogs.Remove(blogId);
        }
        else
        {
            expandedBlogs.Add(blogId);
        }
    }

    private void ToggleLike(string blogId)
    {
        var blog = blogs.FirstOrDefault(b => b.Id == blogId);
        if (blog != null)
        {
            blog.IsLiked = !blog.IsLiked;
            blog.Likes += blog.IsLiked ? 1 : -1;
        }
    }

    private void ToggleBookmark(string blogId)
    {
        var blog = blogs.FirstOrDefault(b => b.Id == blogId);
        if (blog != null)
        {
            blog.IsBookmarked = !blog.IsBookmarked;
        }
    }

    private void SetFilter(string filter)
    {
        activeFilter = filter;
        FilterBlogs();
    }

    private void FilterBlogs()
    {
        filteredBlogs = blogs
            .Where(b => activeFilter == "all" || b.Category == activeFilter)
            .Where(b => string.IsNullOrWhiteSpace(searchQuery) || 
                   b.Title.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) || 
                   b.Summary.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                   (b.IsList && b.ListItems.Any(i => i.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))) ||
                   (!b.IsList && b.Resources.Any(r => r.Title.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) || 
                                              r.Description.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))))
            .ToList();
    }

    private void HandleSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            FilterBlogs();
        }
    }

}