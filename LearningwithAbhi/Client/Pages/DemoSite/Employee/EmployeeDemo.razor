@page "/employees"
@inject Services.EmployeeService EmployeeService
@inject NavigationManager NavigationManager

<h3 class="text-2xl font-bold mb-4">Employee List</h3>

<button class="btn btn-primary mb-3" @onclick="CreateEmployee">Add Employee</button>

@if (employees == null)
{
    <p><em>Loading...</em></p>
}
else if (!employees.Any())
{
    <p>No employees found.</p>
}
else
{
<div class="d-flex flex-wrap  p-2 bd-highlight">
        @foreach (var emp in employees)
        {
            
            <div class="card text-white bg-secondary border shadow-sm p-4">
                <h4 class="font-bold text-lg">@emp.FullName</h4>
                <p><strong>Email:</strong> @emp.Email</p>
                <p><strong>Department:</strong> @emp.Department</p>
                <p><strong>Phone:</strong> @emp.Phone</p>
                <p><strong>Age:</strong> @emp.Age</p>
                <p><strong>Address:</strong> @emp.Address</p>
                <div class="mt-3">
                    <button class="btn btn-sm btn-secondary me-2" @onclick="@(() => EditEmployee(emp.Id))">Edit</button>
                    <button class="btn btn-sm btn-danger" @onclick="@(() => DeleteEmployee(emp.Id))">Delete</button>
                </div>  
            </div>      
        }
</div>
}

@code {
    private List<Employee>? employees;

    protected override async Task OnInitializedAsync()
    {
        employees = await EmployeeService.GetAllAsync();
    }

    private void CreateEmployee()
    {
        NavigationManager.NavigateTo("/employees/add");
    }

    private void EditEmployee(int id)
    {
        NavigationManager.NavigateTo($"/employees/edit/{id}");
    }

    private async Task DeleteEmployee(int id)
    {
        await EmployeeService.DeleteAsync(id);
        employees = await EmployeeService.GetAllAsync(); // Refresh
    }
}
