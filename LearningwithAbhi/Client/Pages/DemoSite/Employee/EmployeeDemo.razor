@page "/employees"
@inject Services.EmployeeService EmployeeService
@inject NavigationManager NavigationManager

<h3 class="text-2xl font-bold mb-4">Employee List</h3>

<button class="btn btn-primary mb-3" @onclick="CreateEmployee">Add Employee</button>

@if (employees == null)
{
    <p><em>Loading...</em></p>
}
else if (!employees.Any())
{
    <p>No employees found.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Email</th>
                <th>Department</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var emp in employees)
            {
                <tr>
                    <td>@emp.FullName</td>
                    <td>@emp.Email</td>
                    <td>@emp.Department</td>
                    <td>
                        <button class="btn btn-sm btn-secondary me-2" @onclick="@(() => EditEmployee(emp.Id))">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="@(() => DeleteEmployee(emp.Id))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Employee>? employees;

    protected override async Task OnInitializedAsync()
    {
        employees = await EmployeeService.GetAllAsync();
    }

    private void CreateEmployee()
    {
        NavigationManager.NavigateTo("/employees/add");
    }

    private void EditEmployee(int id)
    {
        NavigationManager.NavigateTo($"/employees/edit/{id}");
    }

    private async Task DeleteEmployee(int id)
    {
        await EmployeeService.DeleteAsync(id);
        employees = await EmployeeService.GetAllAsync(); // Refresh
    }
}
